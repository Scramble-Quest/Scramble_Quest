let availableWords = []; // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
let usedWords = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
let currentWord = {};
let streak = 0; // Streak ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 0
let timeLeft = 30; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
let timer; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
let lives = 3; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
let selectedLevel = "begin"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

let wordText, hintText, inputField, streakText, timeText, livesText, wordsLeftText, wordProgressText;

window.onload = () => {
    wordText = document.getElementById("scrambled-word");
    hintText = document.getElementById("hint");
    inputField = document.getElementById("user-input");
    streakText = document.getElementById("streak");
    timeText = document.querySelector(".time span b");
    livesText = document.getElementById("lives");
    wordsLeftText = document.getElementById("words-left");
    wordProgressText = document.getElementById("word-progress"); // ‡∏î‡∏∂‡∏á UI ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å URL
    let params = new URLSearchParams(window.location.search);
    let level = params.get("level") || "begin"; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏ä‡πâ "begin" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    setLevel(level);
};

const setLevel = (level) => {
    selectedLevel = level;
    availableWords = [...words[selectedLevel]];
    usedWords = [];
    console.log(`üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${selectedLevel}`);
    initGame();
};

const initGame = () => {
    console.log("Loaded words:", words);

    if (availableWords.length === 0) {
        alert("üéâ ‡∏°‡∏∂‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡πÑ‡∏≠‡πÇ‡∏á‡πà");
        availableWords = [...words[selectedLevel]];
        usedWords = [];
    }

    let randomIndex;
    let selectedWord;

    do {
        randomIndex = Math.floor(Math.random() * availableWords.length);
        selectedWord = availableWords[randomIndex];
    } while (usedWords.includes(selectedWord.word) && availableWords.length > usedWords.length);

    currentWord = selectedWord;

    if (!currentWord.word) {
        console.error("Error: Word data is missing!");
        initGame();
        return;
    }

    usedWords.push(currentWord.word);
    availableWords.splice(randomIndex, 1);

    console.log("Selected word:", currentWord);
    wordText.innerText = scrambleWord(currentWord.word) || "Error!";
    hintText.innerText = `Hint: ${currentWord.hint}` || "No hint available";
    inputField.value = "";
    inputField.style.background = "white";

    updateWordsLeftDisplay();
    updateWordProgress(); // üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô/‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    clearInterval(timer);
    timeLeft = 30;
    updateTimerDisplay();
    updateLivesDisplay();
    startTimer();
};

// üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
const updateWordsLeftDisplay = () => {
    if (wordsLeftText) {
        wordsLeftText.innerText = `üìñ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${availableWords.length}`;
    } else {
        console.error("‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö #words-left ‡πÉ‡∏ô HTML");
    }
};

// üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô / ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const updateWordProgress = () => {
    if (wordProgressText) {
        wordProgressText.innerText = `Word: ${usedWords.length} / ${usedWords.length + availableWords.length}`;
    }
};

const startTimer = () => {
    timer = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();

        if (timeLeft <= 0) {
            clearInterval(timer);
            reduceLife();
        }
    }, 1000);
};

const updateTimerDisplay = () => {
    timeText.innerText = timeLeft;
};

const updateLivesDisplay = () => {
    livesText.innerText = "‚ù§Ô∏è ".repeat(lives);
};

const reduceLife = () => {
    lives--;
    updateLivesDisplay();

    if (lives <= 0) {
        alert(" ‡∏°‡∏∂‡∏á‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏≠‡πÇ‡∏á‡πà üíÄ ");
        resetGame();
    } else {
        alert(`‚ùå ‡πÑ‡∏≠‡πÇ‡∏á‡πà‡∏ï‡∏≠‡∏ö‡∏î‡∏µ‡πÜ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥‡∏ß‡∏∞ ‡∏°‡∏∂‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚ù§Ô∏è ${lives} ‡∏î‡∏ß‡∏á!`);
        initGame();
    }
};

const checkWord = () => {
    let userWord = inputField.value.toLowerCase();
    if (userWord !== currentWord.word.toLowerCase()) {
        inputField.style.background = "red";
        setTimeout(() => { inputField.style.background = "white"; }, 1000);
        streak = 0;
        streakText.innerText = `üî• Streak: ${streak}`;
        reduceLife();
        return;
    }

    inputField.style.background = "green";
    setTimeout(() => { inputField.style.background = "white"; }, 1000);
    streak++;
    streakText.innerText = `üî• Streak: ${streak}`;
    alert(`üéâ Streak: ${streak}  ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÑ‡∏≠‡πÇ‡∏á‡πà‡πÑ‡∏õ‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≠!`);

    initGame();
};

const scrambleWord = (word) => {
    return word.split("").sort(() => Math.random() - 0.5).join("");
};

const resetGame = () => {
    streak = 0;
    lives = 3;
    availableWords = [...words[selectedLevel]];
    usedWords = [];
    initGame();
};

// üî• ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ Streak ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
window.addEventListener("beforeunload", function () {
    streak = 0;
    lives = 3;
});
