let availableWords = [...words]; // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å wordgbeg.js
let currentWord = {};
let streak = 0; // Streak ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 0
let timeLeft = 30; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
let timer; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
let lives = 3; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
let score = 0;
let totalWords = words.length;
let playedWords = 0;

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
let usedWords = new Set();

let wordText, hintText, inputField, streakText, timeText, livesText;

// ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
document.addEventListener('DOMContentLoaded', () => {
    wordText = document.getElementById("scrambled-word");
    hintText = document.getElementById("hint");
    inputField = document.getElementById("user-input");
    streakText = document.getElementById("streak");
    timeText = document.querySelector(".time span b");
    livesText = document.getElementById("lives");

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
    initGame();
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
const initGame = () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (usedWords.size === totalWords) {
        showFinalScore();
        return;
    }

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ
    let selectedWord;
    do {
        const randomIndex = Math.floor(Math.random() * words.length);
        selectedWord = words[randomIndex];
    } while (usedWords.has(selectedWord.word));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
    usedWords.add(selectedWord.word);
    currentWord = selectedWord;

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
    clearInterval(timer);
    timeLeft = 30;
    updateTimerDisplay();
    updateLivesDisplay();
    startTimer();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏î‡∏¥‡∏°
    let scrambledWord;
    do {
        scrambledWord = scrambleWord(currentWord.word);
    } while (scrambledWord === currentWord.word);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    wordText.innerText = scrambledWord;
    hintText.innerText = `Hint: ${currentWord.hint}` || "No hint available";
    inputField.value = "";
    inputField.style.background = "white";
    document.getElementById('progress').innerText = `‡∏Ñ‡∏≥: ${playedWords}/${totalWords}`;
    playedWords++; // ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    reset();
    usedWords.clear();
};

const startTimer = () => {
    timer = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();

        if (timeLeft <= 0) {
            clearInterval(timer);
            reduceLife(); // üî• ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏•‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à
        }
    }, 1000);
};

const updateTimerDisplay = () => {
    timeText.innerText = timeLeft; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô HTML
};

const updateLivesDisplay = () => {
    livesText.innerText = "‚ù§Ô∏è ".repeat(lives); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÉ‡∏ô HTML
};

const reduceLife = () => {
    lives--;
    updateLivesDisplay();

    if (lives <= 0) {
        Swal.fire({
            title: 'üíÄ Game Over!',
            text: '‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß!',
            icon: 'error',
            confirmButtonText: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà',
            allowOutsideClick: false
        }).then((result) => {
            if (result.isConfirmed) {
                resetGame();
            }
        });
    } else {
        Swal.fire({
            title: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏±‡∏ß‡πÉ‡∏à!',
            text: `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚ù§Ô∏è ${lives} ‡∏î‡∏ß‡∏á`,
            icon: 'warning',
            timer: 2000,
            showConfirmButton: false,
        }).then(() => {
            initGame();
        });
    }
};

const checkWord = () => {
    let userWord = inputField.value.toLocaleLowerCase();
    if (userWord !== currentWord.word) {
        Swal.fire({
            title: 'Incorrect! üòï',
            text: `The correct word was: ${currentWord.word}`,
            icon: 'error',
            timer: 2000,
            showConfirmButton: false
        });
        inputField.style.background = "#ffcccc";
        streak = 0; // üî• ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Streak ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
        streakText.innerText = `üî• Streak: ${streak}`;
        reduceLife(); // üî• ‡∏•‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏¥‡∏î
        return;
    }

    score++;
    streak++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ Streak ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å
    inputField.style.background = "#ccffcc"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å
    streakText.innerText = `üî• Streak: ${streak}`;
    
    Swal.fire({
        title: 'Correct! üéâ',
        html: `
            <p>Score: ${score}</p>
            <p>Streak: ${streak}üî•</p>
        `,
        icon: 'success',
        timer: 2000,
        showConfirmButton: false
    });

    initGame();
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≥ ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏î‡∏¥‡∏°
const scrambleWord = (word) => {
    let scrambled;
    do {
        scrambled = word.split("")
            .sort(() => Math.random() - 0.5)
            .join("");
    } while (scrambled === word && word.length > 1);
    return scrambled;
};
const reset = () => {
    playedWords = 0;
    document.getElementById('progress').innerText = 
        `‡∏Ñ‡∏≥: ${playedWords}/${totalWords}`;
}
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°
const resetGame = () => {
    streak = 0;
    score = 0;
    lives = 3;
    playedWords = 0;
    usedWords.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Streak
    streakText.innerText = `üî• Streak: ${streak}`;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    document.getElementById('progress').innerText = 
        `Progress: ${playedWords}/${totalWords}`;
        
    initGame();
};

// üî• ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ Streak ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
window.addEventListener("beforeunload", function () {
    streak = 0;
    lives = 3;
});

// Add this new function for showing final score
const showFinalScore = () => {
    Swal.fire({
        title: '‡∏à‡∏ö‡πÄ‡∏Å‡∏°! üéâ',
        html: `
            <div class="final-score">
                <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${score}/${totalWords}</p>
                <p>‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ : ${lives}‚ù§Ô∏è</p>
            </div>
        `,
        icon: 'success',
        confirmButtonText: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        allowOutsideClick: false
    }).then((result) => {
        if (result.isConfirmed) {
            resetGame();
        }
    });
};
